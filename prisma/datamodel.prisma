


type Verification {
  id: ID! @id
  token: String! @unique
  userId: ID! @unique
}

type User {
  id: ID! @id
  email: String! @unique
  password: String!
  webhook: String
  name: String
  verified: Boolean! @default(value: false)
  builds: [Build!]! @relation(name: "BuildOwner", onDelete: CASCADE)
  buildRevisions: [BuildRevision!]! @relation(name: "RevisionOwner", onDelete: CASCADE)
  raids: [Raid!]! @relation(name: "RaidOwner", onDelete: CASCADE)
  groups: [Group!]! @relation(name: "GroupOwner", onDelete: CASCADE)
}

type MundusStone {
  name: String! @unique
  aldmeri: String
  daggerfall: String
  ebonheart: String
  effect: String!
  value: String!
  icon: String
  id: ID! @id
}

type Buff {
  id: ID! @id
  name: String! @unique
  buffDescription: String!
  description: String
  duration: Int!
  notes: String
  icon: String
  type: String
  buffType: String
  quality: Int!
}

type SetSelection {
  id: ID! @id
  icon: String
  slot: String
  type: String
  weaponType: String
  selectedSet: Set
  trait: Modification @relation(name: "Trait")
  glyph: Modification @relation(name: "Glyph")
}

type Set {
  id: ID! @id
  setId: Int! @unique
  name: String!
  location: String!
  type: String!
  slug: String!
  bonus_item_1: String
  bonus_item_2: String
  bonus_item_3: String
  bonus_item_4: String
  bonus_item_5: String
  has_jewels: Int!
  has_weapons: Int!
  has_heavy_armor: Int!
  has_light_armor: Int!
  has_medium_armor: Int!
  uniqueItem: String
  traits_needed: Int
  pts: Int
  eso_id: Int
}

type Modification {
  id: ID! @id
  type: String! 
  itemType: String!
  modificationType: String!
  description: String! @unique
  icon: String
}

type SkillSelection {
  id: ID! @id
  index: Int!
  skill: Skill
}

type Skill {
  id: ID! @id
  skillId: Int! @unique
  cast_time: String
  cost: String
  effect_1: String!
  effect_2: String
  icon: String
  name: String!
  parent: Int
  pts: Int
  range: String
  skillline: Int!
  slug: String!
  target: String
  type: Int!
  unlocks_at: Int
}

type Build {
  id: ID! @id
  owner: User @relation(name: "BuildOwner")
  name: String
  applicationArea: String
  description: String
  role: String
  race: String
  esoClass: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  published: Boolean! @default(value: false)
  accessRights: String! @default(value: "unlisted")
  stamina: Int
  magicka: Int
  health: Int
  bigPieceSelection: [SetSelection!]! @relation(name: "Bigpieces", onDelete: CASCADE)
  smallPieceSelection: [SetSelection!]! @relation(name: "Smallpieces", onDelete: CASCADE)
  jewelrySelection: [SetSelection!]! @relation(name: "Jewelry", onDelete: CASCADE)
  frontbarSelection: [SetSelection!]! @relation(name: "Frontbar", onDelete: CASCADE)
  backbarSelection: [SetSelection!]! @relation(name: "Backbar", onDelete: CASCADE)
  newBarOne: [SkillSelection!]! @relation(name: "NewBarOne", onDelete: CASCADE)
  newBarTwo: [SkillSelection!]! @relation(name: "NewBarTwo", onDelete: CASCADE)
  ultimateOne: Skill @relation(name: "UltimateOne")
  ultimateTwo: Skill @relation(name: "UltimateTwo", onDelete: CASCADE)
  mundusStone: MundusStone
  buff: Buff
  revision: BuildRevision @relation(name: "RevisionBuild")
}

type Role {
  id: ID! @id
  name: String
  builds: [SortedBuild!]!
}

type SortedBuild {
  id: ID! @id
  index: Int!
  build: Build!
}

type Raid {
  id: ID! @id
  owner: User @relation(name: "RaidOwner")
  name: String
  description: String
  applicationArea: String 
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  published: Boolean! @default(value: false)
  accessRights: String! @default(value: "unlisted")
  canEdit: [User!]! @relation(name: "CanEdit")
  canView: [User!]! @relation(name: "CanView")
  roles: [Role!]! @relation(name: "RaidRoles", onDelete: CASCADE)
}

type GroupBuild {
  id: ID! @id
  build: Build!
  members: [String!]! @scalarList(strategy: RELATION)
}

type Group {
  id: ID! @id
  name: String
  owner: User @relation(name: "GroupOwner")
  description: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  accessRights: String! @default(value: "unlisted")
  members: [String!]! @scalarList(strategy: RELATION)
  groupBuilds: [GroupBuild!]! @relation(name: "RelatedGroup", onDelete: CASCADE)
}

type BuildRevision {
  id: ID! @id
  owner: User @relation(name: "RevisionOwner")
  builds: [Build!]! @relation(name: "RevisionBuild", onDelete: CASCADE)
}

type RaidRevision {
  id: ID! @id
  raids: [Raid!]!
}